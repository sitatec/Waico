// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../core/entities/conversation.dart';
import '../core/entities/conversation_memory.dart';
import '../core/entities/user.dart';
import '../features/meditation/models/meditation_guide.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 7391831151089593972),
    name: 'Conversation',
    lastPropertyId: const obx_int.IdUid(6, 6933633824755297981),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1930308806573986069),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2432733367062281939),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8145821362076987509),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 271786355406298319),
        name: 'observations',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2063453041677220906),
        name: 'summary',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'memories',
        srcEntity: 'ConversationMemory',
        srcField: 'conversation',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 5697885661381816381),
    name: 'ConversationMemory',
    lastPropertyId: const obx_int.IdUid(5, 2669593327413781358),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2129053777933098174),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8740622706670844385),
        name: 'embeddings',
        type: 28,
        flags: 8,
        indexId: const obx_int.IdUid(2, 1377078954586485806),
        hnswParams: obx_int.ModelHnswParams(
          dimensions: 1024,
          indexingSearchCount: 200,
          distanceType: 3,
        ),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2732217944615821771),
        name: 'conversationId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 4852819179156216796),
        relationTarget: 'Conversation',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2669593327413781358),
        name: 'content',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 8823447173051830056),
    name: 'User',
    lastPropertyId: const obx_int.IdUid(8, 3233262848891913473),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5228525514244251395),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6884491784261660228),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8958741128853572380),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1283189109077027113),
        name: 'preferredName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 9089175368154372475),
        name: 'userInfo',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3860500815886961103),
        name: 'dbWorkoutSetupData',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6277389197328313834),
        name: 'dbWorkoutPlan',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 3233262848891913473),
        name: 'dbWorkoutProgress',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 2907517368197004077),
    name: 'MeditationGuide',
    lastPropertyId: const obx_int.IdUid(9, 7115588888439512280),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 516678667953570628),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 950710071722786416),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7198088111558181103),
        name: 'type',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6169450128230088092),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7609776571188671615),
        name: 'durationMinutes',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3398622800216475628),
        name: 'script',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7424964048795772755),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8342361849064129083),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 7115588888439512280),
        name: 'isCompleted',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(4, 2907517368197004077),
    lastIndexId: const obx_int.IdUid(3, 4852819179156216796),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [195901725711995868],
    retiredPropertyUids: const [6933633824755297981, 3913860355338299821],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Conversation: obx_int.EntityDefinition<Conversation>(
      model: _entities[0],
      toOneRelations: (Conversation object) => [],
      toManyRelations: (Conversation object) => {
        obx_int.RelInfo<ConversationMemory>.toOneBacklink(
          4,
          object.id,
          (ConversationMemory srcObject) => srcObject.conversation,
        ): object.memories,
      },
      getId: (Conversation object) => object.id,
      setId: (Conversation object, int id) {
        object.id = id;
      },
      objectToFB: (Conversation object, fb.Builder fbb) {
        final observationsOffset = fbb.writeString(object.observations);
        final summaryOffset = fbb.writeString(object.summary);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(2, object.updatedAt.millisecondsSinceEpoch);
        fbb.addOffset(3, observationsOffset);
        fbb.addOffset(4, summaryOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
        );
        final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final summaryParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final observationsParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = Conversation(
          id: idParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
          summary: summaryParam,
          observations: observationsParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Conversation>(
          object.memories,
          store,
          obx_int.RelInfo<ConversationMemory>.toOneBacklink(
            4,
            object.id,
            (ConversationMemory srcObject) => srcObject.conversation,
          ),
        );
        return object;
      },
    ),
    ConversationMemory: obx_int.EntityDefinition<ConversationMemory>(
      model: _entities[1],
      toOneRelations: (ConversationMemory object) => [object.conversation],
      toManyRelations: (ConversationMemory object) => {},
      getId: (ConversationMemory object) => object.id,
      setId: (ConversationMemory object, int id) {
        object.id = id;
      },
      objectToFB: (ConversationMemory object, fb.Builder fbb) {
        final embeddingsOffset = fbb.writeListFloat32(object.embeddings);
        final contentOffset = fbb.writeString(object.content);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(2, embeddingsOffset);
        fbb.addInt64(3, object.conversation.targetId);
        fbb.addOffset(4, contentOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final embeddingsParam = const fb.ListReader<double>(
          fb.Float32Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 8, []);
        final object = ConversationMemory(
          id: idParam,
          content: contentParam,
          embeddings: embeddingsParam,
        );
        object.conversation.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.conversation.attach(store);
        return object;
      },
    ),
    User: obx_int.EntityDefinition<User>(
      model: _entities[2],
      toOneRelations: (User object) => [],
      toManyRelations: (User object) => {},
      getId: (User object) => object.id,
      setId: (User object, int id) {
        object.id = id;
      },
      objectToFB: (User object, fb.Builder fbb) {
        final preferredNameOffset = fbb.writeString(object.preferredName);
        final userInfoOffset = fbb.writeString(object.userInfo);
        final dbWorkoutSetupDataOffset = object.dbWorkoutSetupData == null
            ? null
            : fbb.writeString(object.dbWorkoutSetupData!);
        final dbWorkoutPlanOffset = object.dbWorkoutPlan == null
            ? null
            : fbb.writeString(object.dbWorkoutPlan!);
        final dbWorkoutProgressOffset = object.dbWorkoutProgress == null
            ? null
            : fbb.writeString(object.dbWorkoutProgress!);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(2, object.updatedAt.millisecondsSinceEpoch);
        fbb.addOffset(3, preferredNameOffset);
        fbb.addOffset(4, userInfoOffset);
        fbb.addOffset(5, dbWorkoutSetupDataOffset);
        fbb.addOffset(6, dbWorkoutPlanOffset);
        fbb.addOffset(7, dbWorkoutProgressOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
        );
        final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final preferredNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final userInfoParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final object =
            User(
                id: idParam,
                createdAt: createdAtParam,
                updatedAt: updatedAtParam,
                preferredName: preferredNameParam,
                userInfo: userInfoParam,
              )
              ..dbWorkoutSetupData = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGetNullable(buffer, rootOffset, 14)
              ..dbWorkoutPlan = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGetNullable(buffer, rootOffset, 16)
              ..dbWorkoutProgress = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGetNullable(buffer, rootOffset, 18);

        return object;
      },
    ),
    MeditationGuide: obx_int.EntityDefinition<MeditationGuide>(
      model: _entities[3],
      toOneRelations: (MeditationGuide object) => [],
      toManyRelations: (MeditationGuide object) => {},
      getId: (MeditationGuide object) => object.id,
      setId: (MeditationGuide object, int id) {
        object.id = id;
      },
      objectToFB: (MeditationGuide object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final typeOffset = fbb.writeString(object.type);
        final descriptionOffset = fbb.writeString(object.description);
        final scriptOffset = fbb.writeString(object.script);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, titleOffset);
        fbb.addOffset(2, typeOffset);
        fbb.addOffset(3, descriptionOffset);
        fbb.addInt64(4, object.durationMinutes);
        fbb.addOffset(5, scriptOffset);
        fbb.addInt64(6, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(7, object.updatedAt.millisecondsSinceEpoch);
        fbb.addBool(8, object.isCompleted);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final durationMinutesParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final scriptParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
        );
        final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
        );
        final isCompletedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          20,
          false,
        );
        final object = MeditationGuide(
          id: idParam,
          title: titleParam,
          type: typeParam,
          description: descriptionParam,
          durationMinutes: durationMinutesParam,
          script: scriptParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
          isCompleted: isCompletedParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Conversation] entity fields to define ObjectBox queries.
class Conversation_ {
  /// See [Conversation.id].
  static final id = obx.QueryIntegerProperty<Conversation>(
    _entities[0].properties[0],
  );

  /// See [Conversation.createdAt].
  static final createdAt = obx.QueryDateProperty<Conversation>(
    _entities[0].properties[1],
  );

  /// See [Conversation.updatedAt].
  static final updatedAt = obx.QueryDateProperty<Conversation>(
    _entities[0].properties[2],
  );

  /// See [Conversation.observations].
  static final observations = obx.QueryStringProperty<Conversation>(
    _entities[0].properties[3],
  );

  /// See [Conversation.summary].
  static final summary = obx.QueryStringProperty<Conversation>(
    _entities[0].properties[4],
  );

  /// see [Conversation.memories]
  static final memories =
      obx.QueryBacklinkToMany<ConversationMemory, Conversation>(
        ConversationMemory_.conversation,
      );
}

/// [ConversationMemory] entity fields to define ObjectBox queries.
class ConversationMemory_ {
  /// See [ConversationMemory.id].
  static final id = obx.QueryIntegerProperty<ConversationMemory>(
    _entities[1].properties[0],
  );

  /// See [ConversationMemory.embeddings].
  static final embeddings = obx.QueryHnswProperty<ConversationMemory>(
    _entities[1].properties[1],
  );

  /// See [ConversationMemory.conversation].
  static final conversation =
      obx.QueryRelationToOne<ConversationMemory, Conversation>(
        _entities[1].properties[2],
      );

  /// See [ConversationMemory.content].
  static final content = obx.QueryStringProperty<ConversationMemory>(
    _entities[1].properties[3],
  );
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[2].properties[0]);

  /// See [User.createdAt].
  static final createdAt = obx.QueryDateProperty<User>(
    _entities[2].properties[1],
  );

  /// See [User.updatedAt].
  static final updatedAt = obx.QueryDateProperty<User>(
    _entities[2].properties[2],
  );

  /// See [User.preferredName].
  static final preferredName = obx.QueryStringProperty<User>(
    _entities[2].properties[3],
  );

  /// See [User.userInfo].
  static final userInfo = obx.QueryStringProperty<User>(
    _entities[2].properties[4],
  );

  /// See [User.dbWorkoutSetupData].
  static final dbWorkoutSetupData = obx.QueryStringProperty<User>(
    _entities[2].properties[5],
  );

  /// See [User.dbWorkoutPlan].
  static final dbWorkoutPlan = obx.QueryStringProperty<User>(
    _entities[2].properties[6],
  );

  /// See [User.dbWorkoutProgress].
  static final dbWorkoutProgress = obx.QueryStringProperty<User>(
    _entities[2].properties[7],
  );
}

/// [MeditationGuide] entity fields to define ObjectBox queries.
class MeditationGuide_ {
  /// See [MeditationGuide.id].
  static final id = obx.QueryIntegerProperty<MeditationGuide>(
    _entities[3].properties[0],
  );

  /// See [MeditationGuide.title].
  static final title = obx.QueryStringProperty<MeditationGuide>(
    _entities[3].properties[1],
  );

  /// See [MeditationGuide.type].
  static final type = obx.QueryStringProperty<MeditationGuide>(
    _entities[3].properties[2],
  );

  /// See [MeditationGuide.description].
  static final description = obx.QueryStringProperty<MeditationGuide>(
    _entities[3].properties[3],
  );

  /// See [MeditationGuide.durationMinutes].
  static final durationMinutes = obx.QueryIntegerProperty<MeditationGuide>(
    _entities[3].properties[4],
  );

  /// See [MeditationGuide.script].
  static final script = obx.QueryStringProperty<MeditationGuide>(
    _entities[3].properties[5],
  );

  /// See [MeditationGuide.createdAt].
  static final createdAt = obx.QueryDateProperty<MeditationGuide>(
    _entities[3].properties[6],
  );

  /// See [MeditationGuide.updatedAt].
  static final updatedAt = obx.QueryDateProperty<MeditationGuide>(
    _entities[3].properties[7],
  );

  /// See [MeditationGuide.isCompleted].
  static final isCompleted = obx.QueryBooleanProperty<MeditationGuide>(
    _entities[3].properties[8],
  );
}
